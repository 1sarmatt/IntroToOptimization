#include <iostream>
#include <stdexcept>
#include <cmath>
#include <vector>

class Matrix {
 public:
  int n;
  int m;
  double **values;
  Matrix()
      : n(0), m(0), values(nullptr) {};
  Matrix(int n, int m)
      : n(n), m(m) {
    values = new double *[n];
    for (int i = 0; i < n; i++) {
      values[i] = new double[m];
    }
  };
  Matrix &operator=(Matrix const &A) {
    n = A.n;
    m = A.m;
    values = new double *[n];
    for (int i = 0; i < n; ++i) {
      values[i] = new double[m];
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        this->values[i][j] = A.values[i][j];
      }
    }
    return *this;
  }
  Matrix operator+(Matrix &A) {
    if (n != A.n || m != A.m)throw std::runtime_error("Error: the dimensional problem occurred\n");
    Matrix toReturn(n, m);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        toReturn.values[i][j] = this->values[i][j] + A.values[i][j];
      }
    }
    return toReturn;
  }
  Matrix operator-(Matrix &A) {
    if (n != A.n || m != A.m)throw std::runtime_error("Error: the dimensional problem occurred\n");
    Matrix toReturn(n, m);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        toReturn.values[i][j] = this->values[i][j] - A.values[i][j];
      }
    }
    return toReturn;
  }
  Matrix operator*(Matrix &A) {
    if (m != A.n)throw std::runtime_error("Error: the dimensional problem occurred\n");
    Matrix toReturn(n, A.m);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < A.m; j++) {
        toReturn.values[i][j] = 0;
        for (int k = 0; k < m; k++) {
          toReturn.values[i][j] += this->values[i][k] * A.values[k][j];
        }
      }
    }
    return toReturn;
  }
  Matrix operator*(double value) {
    Matrix toReturn(n, m);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        toReturn.values[i][j] = this->values[i][j] * value;
      }
    }
    return toReturn;
  }
  Matrix tranpose() {
    Matrix toReturn(m, n);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        toReturn.values[j][i] = this->values[i][j];
      }
    }
    return toReturn;
  }
  void round() {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        values[i][j] = ceil(values[i][j] * 100000.0) / 100000.0;
      }
    }
  }
};
class SquareMatrix : public Matrix {
 public:
  SquareMatrix()
      : Matrix() {};
  SquareMatrix(int n)
      : Matrix(n, n) {};
  SquareMatrix operator*(Matrix &A) {
    if (m != A.n) throw std::runtime_error("Error: the dimensional problem occurred\n");
    SquareMatrix toReturn(n);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < A.m; j++) {
        toReturn.values[i][j] = 0;
        for (int k = 0; k < m; k++) {
          toReturn.values[i][j] += this->values[i][k] * A.values[k][j];
        }
      }
    }
    return toReturn;
  }
  SquareMatrix &operator=(Matrix const &A) {
    n = A.n;
    m = A.m;
    values = new double *[n];
    for (int i = 0; i < n; ++i) {
      values[i] = new double[m];
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < m; j++) {
        this->values[i][j] = A.values[i][j];
      }
    }
    return *this;
  }
  int choosePivot(int n, int N) {
    double max = -1;
    int pivot = 0;
    for (int i = N - 1; i >= n; i--) {
      if (abs(values[i][n]) >= max) {
        max = abs(values[i][n]);
        pivot = i;
      }
    }
    return pivot;
  }
  bool isUpperTriangular(double eps = 0.0001) {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < i; j++) {
        if (values[i][j] > eps) {
          return false;
        }
      }
    }
    return true;
  }
  bool isLowerTriangular(double eps = 0.0001) {
    for (int i = 0; i < n; i++) {
      for (int j = i + 1; j < n; j++) {
        if (values[i][j] > eps) {
          return false;
        }
      }
    }
    return true;
  }
  double getDeterminant() {
    double Determinant = 1;
    for (int i = 0; i < n; i++) {
      Determinant *= values[i][i];
    }
    return Determinant;
  }
};
class IdentityMatrix : public SquareMatrix {
 public:
  IdentityMatrix()
      : SquareMatrix() {};
  IdentityMatrix(int n)
      : SquareMatrix(n) {};
  void fillWithOnes() {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (i == j)values[i][j] = 1;
        else values[i][j] = 0;
      }
    }
  }
};
class PermutationMatrix : public IdentityMatrix {
 public:
  PermutationMatrix()
      : IdentityMatrix() {};
  PermutationMatrix(int n)
      : IdentityMatrix(n) {};
  void findPermutationMatrix(int first, int second) {
    double *temp = values[first];
    values[first] = values[second];
    values[second] = temp;
  }
};
class EliminationMatrix : public IdentityMatrix {
 public:
  EliminationMatrix()
      : IdentityMatrix() {};
  EliminationMatrix(int n)
      : IdentityMatrix(n) {};
  void findEliminationMatrix(SquareMatrix &toEliminate) {
    int j = 0;
    while (j < n) {
      for (int i = std::max(1, n / 2 - 1); i < n; i++) {
        if (j < i) {
          double pivotValue = toEliminate.values[j][j];
          if (toEliminate.values[i][j] != 0) {
            double value = toEliminate.values[i][j] / pivotValue;
            values[i][j] = -value;
            return;
          }
        }
      }
      j++;
    }
  }
  void findEliminationMatrixBackward(SquareMatrix &toEliminate) {
    int j = n - 1;
    while (j > 0) {
      for (int i = n - 1; i >= 0; i--) {
        if (j > i) {
          double pivotValue = toEliminate.values[j][j];
          if (toEliminate.values[i][j] != 0) {
            double value = toEliminate.values[i][j] / pivotValue;
            values[i][j] = -value;
            return;
          }
        }
      }
      j--;
    }
  }
};
class ColumnVector : public Matrix {
 public:
  ColumnVector()
      : Matrix() {};
  ColumnVector(int n)
      : Matrix(n, 1) {};
  ColumnVector operator+(ColumnVector &A) {
    if (n != A.n || m != A.m)throw std::runtime_error("Error: the dimensional problem occurred\n");
    ColumnVector toReturn(n);
    for (int i = 0; i < n; i++) {
      toReturn.values[i][0] = this->values[i][0] + A.values[i][0];
    }
    return toReturn;
  }
  ColumnVector operator*(Matrix &A) {
    if (m != A.n)throw std::runtime_error("Error: the dimensional problem occurred\n");
    ColumnVector toReturn(n);
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < A.m; j++) {
        for (int k = 0; k < m; k++) {
          toReturn.values[i][j] += this->values[i][k] * A.values[k][j];
        }
      }
    }
    return toReturn;
  }
};
class AugmentedMatrix : SquareMatrix {
 public:
  EliminationMatrix E;
  SquareMatrix A;
  AugmentedMatrix() {};
  AugmentedMatrix(SquareMatrix A)
      : SquareMatrix(A.n), E(A.n), A(A) {
    E.fillWithOnes();
  };
  void diagonalNormalization() {
    for (int i = 0; i < n; i++) {
      double value = A.values[i][i];
      A.values[i][i] /= value;
      for (int j = 0; j < m; j++) {
        E.values[i][j] /= value;
      }
    }
  }
};

std::pair<std::vector<double>, Matrix> readObjectiveFunction() {
  std::cout << "Enter the vector of coefficients of the objective function" << std::endl;
  std::string vectorOfCoefficients;
  std::getline(std::cin, vectorOfCoefficients);
  std::vector<double> parsed;
  std::string number = "";
  for (char i : vectorOfCoefficients) {
    if (isdigit(i) || i == '.' || i == '-') {
      number += i;
    } else {
      parsed.push_back(std::stod(number));
      number = "";
    }
  }
  if (!number.empty()) {
    parsed.push_back(std::stod(number));
  }
  Matrix toReturn(parsed.size(), 1);
  for (int i = 0; i < toReturn.n; i++) {
    for (int j = 0; j < toReturn.m; j++) {
      toReturn.values[i][j] = parsed[i + j];
    }
  }
  return std::make_pair(parsed, toReturn);
}

std::pair<std::vector<std::vector<double>>, Matrix> readConstraints(int numberOfCoefficients) {
  int numberOfConstraints;
  std::cout << "Enter the number of constraints" << std::endl;
  std::cin >> numberOfConstraints;
  std::cout << "Enter the matrix of coefficients of the constraint functions" << std::endl;
  std::vector<std::vector<double>> constraints;
  std::vector<double> constraint;
  for (int i = 0; i < numberOfConstraints; i++) {
    for (int j = 0; j < numberOfCoefficients; j++) {
      double coefficient;
      std::cin >> coefficient;
      constraint.push_back(coefficient);
    }
    constraints.push_back(constraint);
    constraint.clear();
  }
  Matrix toReturn(numberOfConstraints, numberOfCoefficients);
  for (int i = 0; i < toReturn.n; i++) {
    for (int j = 0; j < toReturn.m; j++) {
      toReturn.values[i][j] = constraints[i][j];
    }
  }
  return std::make_pair(constraints, toReturn);
}

std::pair<std::vector<double>, Matrix> readRightHandSide(int numberOfElements) {
  std::cout << "Enter the vector of right-hand side numbers\n";
  std::vector<double> rightHandSide;
  for (int i = 0; i < numberOfElements; i++) {
    double element;
    std::cin >> element;
    rightHandSide.push_back(element);
  }
  Matrix toReturn(rightHandSide.size(), 1);
  for (int i = 0; i < toReturn.n; i++) {
    for (int j = 0; j < toReturn.m; j++) {
      toReturn.values[i][j] = rightHandSide[i + j];
    }
  }
  return std::make_pair(rightHandSide, toReturn);
}

std::vector<double> findInitialStartingPoint(Matrix objectiveCoefficients,
                                             Matrix constraintCoefficients,
                                             Matrix rightHandSide) {
  int q = 0;
  std::vector<double> toReturn;
  bool flag = true;
  while (flag) {
    if (q > 20) {
      std::cout << "An interior point method:" << std::endl << "The method is not applicable!" << std::endl;
      return toReturn;
    }
    flag = false;
    for (int i = 0; i < objectiveCoefficients.n; i++) {
      toReturn.push_back(1 / pow(10, q));
    }
    for (int i = 0; i < constraintCoefficients.n; i++) {
      double value = rightHandSide.values[i][0];
      for (int j = 0; j < constraintCoefficients.m; j++) {
        value -= constraintCoefficients.values[i][j] / pow(10, q);
      }
      toReturn.push_back(value);
      if (value < 0) {
        toReturn.clear();
        q++;
        flag = true;
        break;
      }
    }
  }
  return toReturn;
}

SquareMatrix findInverse(SquareMatrix A, double eps = 0.0001) {
  SquareMatrix B;
  B = A;
  int step = 0;
  while (!A.isUpperTriangular()) {
    bool flag = false;
    A.round();
    for (int i = step + 1; i < A.n; i++) {
      if (A.values[i][step] != 0) {
        flag = true;
        break;
      }
    }
    if (!flag)step++;
    int pivot = A.choosePivot(step, A.n);
    if (pivot != step) {
      PermutationMatrix P(A.n);
      P.fillWithOnes();
      P.findPermutationMatrix(pivot, step);
      (Matrix &) A = P * A;
      continue;
    }
    EliminationMatrix E(A.n);
    E.fillWithOnes();
    E.findEliminationMatrix(A);
    (Matrix &) A = E * A;
  }
  if ((ceil(A.getDeterminant() * 100.0) / 100.0) == 0.0) {
    std::cout << "Error: matrix A is singular";
    exit(0);
  }
  AugmentedMatrix AM(B);
  step = 0;
  while (!AM.A.isUpperTriangular()) {
    bool flag = false;
    AM.A.round();
    AM.E.round();
    for (int i = step + 1; i < AM.A.n; i++) {
      if (AM.A.values[i][step] != 0) {
        flag = true;
        break;
      }
    }
    if (!flag)step++;
    int pivot = AM.A.choosePivot(step, AM.A.n);
    if (pivot != step) {
      PermutationMatrix P(AM.A.n);
      P.fillWithOnes();
      P.findPermutationMatrix(pivot, step);
      (Matrix &) AM.A = P * AM.A;
      (Matrix &) AM.E = P * AM.E;
      continue;
    }
    EliminationMatrix E(AM.A.n), E2;
    E.fillWithOnes();
    E.findEliminationMatrix(AM.A);
    (Matrix &) AM.A = E * AM.A;
    (Matrix &) AM.E = E * AM.E;
  }
  while (!AM.A.isLowerTriangular()) {
    AM.A.round();
    AM.E.round();
    EliminationMatrix E(AM.A.n);
    E.fillWithOnes();
    E.findEliminationMatrixBackward(AM.A);
    (Matrix &) AM.A = E * AM.A;
    (Matrix &) AM.E = E * AM.E;
  }
  AM.diagonalNormalization();
  return AM.E;
}

void initializeMatrices(Matrix &A, Matrix &c) {
  Matrix newA(A.n, A.m + A.n);
  for (int i = 0; i < A.n; i++) {
    for (int j = 0; j < A.m; j++) {
      newA.values[i][j] = A.values[i][j];
    }
  }
  for (int i = 0; i < newA.n; i++) {
    for (int j = A.m; j < newA.m; j++) {
      if (i == j - A.m)newA.values[i][j] = 1;
      else newA.values[i][j] = 0;
    }
  }
  Matrix newC(c.n + A.n, c.m);
  for (int i = 0; i < c.n; i++) {
    for (int j = 0; j < c.m; j++) {
      newC.values[i][j] = c.values[i][j];
    }
  }
  for (int i = c.n; i < newC.n; i++) {
    for (int j = 0; j < c.m; j++) {
      newC.values[i][j] = 0;
    }
  }
  A = newA;
  c = newC;
}
void startInteriorPointAlgorithm(std::vector<double> currentTrialSolution,
                                 Matrix A,
                                 Matrix c,
                                 double epsilon,
                                 double alpha,
                                 double oldZ = INT_MIN,
                                 int numberOfIterations = 0) {
  if (oldZ == INT_MIN) {
    initializeMatrices(A, c);
  }
  double z = 0;
  for (int i = 0; i < currentTrialSolution.size(); i++) {
    z += currentTrialSolution[i] * c.values[i][0];
  }
  if (numberOfIterations > 1000) {
    std::cout << "alpha = " << alpha << ":" << std::endl;
    std::cout << "The problem does not have solution!" << std::endl;
    return;
  }
  if (z - oldZ < epsilon) {
    std::cout << "alpha = " << alpha << ":" << std::endl;
    std::cout << "A vector of decision variables: (";
    for (int i = 0; i < c.n; i++) {
      if (i == c.n - 1) std::cout << currentTrialSolution[i] << ")" << std::endl;
      else std::cout << currentTrialSolution[i] << "; ";
    }
    std::cout << "Maximum value of the objective function = " << z << std::endl;
    return;
  }
  Matrix D(currentTrialSolution.size(), currentTrialSolution.size());
  for (int i = 0; i < currentTrialSolution.size(); i++) {
    for (int j = 0; j < currentTrialSolution.size(); j++) {
      if (i == j)D.values[i][j] = currentTrialSolution[i];
      else D.values[i][j] = 0;
    }
  }
  Matrix A1 = A * D;
  Matrix c1 = D * c;
  Matrix A1T = A1.tranpose();
  Matrix A1A1T = A1 * A1T;
  SquareMatrix A1A1TSquare(A1A1T.n);
  for (int i = 0; i < A1A1T.n; i++) {
    for (int j = 0; j < A1A1T.m; j++) {
      A1A1TSquare.values[i][j] = A1A1T.values[i][j];
    }
  }
  Matrix A1A1Tm1 = findInverse(A1A1TSquare);
  Matrix A1TA1ATm1 = A1T * A1A1Tm1;
  Matrix A1TA1ATm1A1 = A1TA1ATm1 * A1;
  IdentityMatrix I(A1TA1ATm1A1.n);
  I.fillWithOnes();
  Matrix P = I - A1TA1ATm1A1;
  Matrix cp = P * c1;
  double v = -1;
  for (int i = 0; i < cp.n; i++) {
    for (int j = 0; j < cp.m; j++) {
      if (cp.values[i][j] < 0 && fabs(cp.values[i][j]) > v) {
        v = fabs(cp.values[i][j]);
      }
    }
  }
  Matrix ones(cp.n, cp.m);
  for (int i = 0; i < cp.n; i++) {
    for (int j = 0; j < cp.m; j++) {
      ones.values[i][j] = 1;
    }
  }
  Matrix avcp = cp * (alpha / v);
  Matrix x1 = ones + avcp;
  Matrix x = D * x1;
  std::vector<double> xVector;
  for (int i = 0; i < x.n; i++) {
    for (int j = 0; j < x.m; j++) {
      xVector.push_back(x.values[i][j]);
    }
  }
  startInteriorPointAlgorithm(xVector, A, c, epsilon, alpha, z, ++numberOfIterations);
}

std::vector<std::vector<double>> initialize(std::vector<double> &objectiveFunction,
                                            std::vector<std::vector<double>> &constraints,
                                            std::vector<double> &rightHandSide,
                                            int numberOfRows,
                                            int numberOfColumns,
                                            std::vector<std::string> &nonBasic,
                                            std::vector<std::string> &basic) {
  std::vector<std::vector<double>> table(numberOfRows, std::vector<double>(numberOfColumns));
  for (int i = 0; i < objectiveFunction.size(); i++) {
    table[0][i] = -objectiveFunction[i];
    nonBasic[i] = "x" + std::to_string(i + 1);
  }
  for (int i = objectiveFunction.size(); i < numberOfColumns; i++) {
    table[0][i] = 0;
    if (i != numberOfColumns - 1) {
      nonBasic[i] = "s" + std::to_string(i - objectiveFunction.size() + 1);
      basic[i - objectiveFunction.size()] = "s" + std::to_string(i - objectiveFunction.size() + 1);
    }
  }
  for (int i = 1; i < numberOfRows; i++) {
    for (int j = 0; j < objectiveFunction.size(); j++) {
      table[i][j] = constraints[i - 1][j];
    }
    for (int j = objectiveFunction.size(); j < numberOfColumns; j++) {
      if (j - objectiveFunction.size() + 1 == i)table[i][j] = 1;
      else table[i][j] = 0;
    }
  }
  for (int i = 1; i < numberOfRows; i++) {
    table[i][numberOfColumns - 1] = rightHandSide[i - 1];
  }
  return table;
}

int findPivotColumn(std::vector<std::vector<double>> &table, int numberOfColumns) {
  int num = -1;
  double min = INT_MAX;
  for (int i = 0; i < numberOfColumns - 1; i++) {
    if (table[0][i] < min) {
      min = table[0][i];
      num = i;
    }
  }
  if (num == -1) {
    std::cout << "Method is not applicable!" << std::endl;
    exit(0);
  }
  return num;
}

int findPivotRow(std::vector<std::vector<double>> &table,
                 int numberOfRows,
                 int numberOfColumns,
                 int pivotColumn,
                 double eps) {
  int num = -1;
  double min = INT_MAX;
  for (int i = 1; i < numberOfRows; i++) {
    double ratio = table[i][numberOfColumns - 1] / table[i][pivotColumn];
    if (fabs(ratio) < eps)ratio = 0;
    if (ratio < min && ratio > 0) {
      min = ratio;
      num = i;
    }
  }
  if (num == -1) {
    std::cout << "Method is not applicable!" << std::endl;
    exit(0);
  }
  return num;
}

void performIteration(std::vector<std::vector<double>> &oldTable,
                      int numberOfRows,
                      int numberOfColumns,
                      int pivotRow,
                      int pivotColumn,
                      double eps,
                      std::vector<std::string> &nonBasic,
                      std::vector<std::string> &basic) {
  std::vector<std::vector<double>> newTable = oldTable;
  std::swap(nonBasic[pivotColumn], basic[pivotRow - 1]);
  for (int i = 0; i < numberOfColumns; i++) {
    newTable[pivotRow][i] /= oldTable[pivotRow][pivotColumn];
    if (fabs(newTable[pivotRow][i]) < eps)newTable[pivotRow][i] = 0;
  }
  for (int i = 0; i < numberOfRows; i++) {
    if (i == pivotRow)continue;
    for (int j = 0; j < numberOfColumns; j++) {
      if (j == pivotColumn) {
        newTable[i][j] = 0;
      } else {
        newTable[i][j] = oldTable[i][j] - oldTable[i][pivotColumn] * newTable[pivotRow][j];
        if (fabs(newTable[i][j]) < eps)newTable[i][j] = 0;
      }
    }
  }
  oldTable = newTable;
}

int checkOptimality(std::vector<std::vector<double>> &table, int numberOfColumns, std::vector<std::string> &nonBasic) {
  bool isUnbounded = true;
  bool finish = true;
  for (int i = 0; i < numberOfColumns; i++) {
    if (table[0][i] < 0) {
      finish = false;
      break;
    }
  }
  for (std::string coefficient : nonBasic) {
    if (coefficient[0] == 'x') {
      isUnbounded = false;
      break;
    }
  }
  if (finish)return 1;
  if (isUnbounded)return -1;
  return 0;
}

void printResult(std::vector<double> &objectiveFunction,
                 std::vector<std::string> &basic,
                 std::vector<std::vector<double>> &table,
                 int numberOfColumns) {
  std::vector<double> optimalVariables(objectiveFunction.size());
  for (int i = 0; i < basic.size(); i++) {
    if (basic[i][0] == 'x') {
      optimalVariables[basic[i][1] - '0' - 1] = table[i + 1][numberOfColumns - 1];
    }
  }
  std::cout << "The problem is solved" << std::endl << "Maximum value of the objective function = "
            << table[0][numberOfColumns - 1] << std::endl << "Optimal vector of decision variables = (";
  for (int i = 0; i < optimalVariables.size(); i++) {
    if (i == optimalVariables.size() - 1) std::cout << optimalVariables[i] << ")" << std::endl;
    else std::cout << optimalVariables[i] << "; ";
  }
}

void simplexMethod(std::vector<double> &objectiveFunction,
                   std::vector<std::vector<double>> &constraints,
                   std::vector<double> &rightHandSide,
                   double eps) {
  int numberOfRows = constraints.size() + 1;
  int numberOfColumns = objectiveFunction.size() + constraints.size() + 1;
  bool isUnbounded = false;
  std::vector<std::string> nonBasic(numberOfColumns - 1);
  std::vector<std::string> basic(numberOfRows - 1);
  std::vector<std::vector<double>>
      table = initialize(objectiveFunction, constraints, rightHandSide, numberOfRows, numberOfColumns, nonBasic, basic);
  while (true) {
    int pivotColumn = findPivotColumn(table, numberOfColumns);
    int pivotRow = findPivotRow(table, numberOfRows, numberOfColumns, pivotColumn, eps);
    performIteration(table, numberOfRows, numberOfColumns, pivotRow, pivotColumn, eps, nonBasic, basic);
    int optimality = checkOptimality(table, numberOfColumns, nonBasic);
    if (optimality == 1) {
      break;
    } else if (optimality == -1) {
      isUnbounded = true;
      break;
    }
  }
  if (isUnbounded) {
    std::cout << "The function is unbounded" << std::endl;
    return;
  }
  printResult(objectiveFunction, basic, table, numberOfColumns);
}

void printTheOptimizationProblem(std::vector<double> &objectiveFunction,
                                 std::vector<std::vector<double>> &constraints,
                                 std::vector<double> &rightHandSide) {
  std::cout << "The optimization problem is following:" << std::endl << "max z = ";
  int temp = 1;
  for (double i : objectiveFunction) {
    if (temp == objectiveFunction.size())std::cout << i << " * x" << temp << std::endl;
    else std::cout << i << " * x" << temp << " + ";
    temp++;
  }
  std::cout << "Subject to constraints:" << std::endl;
  for (int i = 0; i < constraints.size(); i++) {
    temp = 1;
    for (int j = 0; j < objectiveFunction.size(); j++) {
      if (temp == objectiveFunction.size())
        std::cout << constraints[i][j] << " * x" << temp << " <= " << rightHandSide[i] << std::endl;
      else std::cout << constraints[i][j] << " * x" << temp << " + ";
      temp++;
    }
  }
}

int main() {
  std::pair<std::vector<double>, Matrix> objective = readObjectiveFunction();
  Matrix objectiveCoefficients = objective.second;
  std::vector<double> objectiveCoefficientsForSimplex = objective.first;
  std::pair<std::vector<std::vector<double>>, Matrix> constraints = readConstraints(objectiveCoefficients.n);
  Matrix constraintCoefficients = constraints.second;
  std::vector<std::vector<double>> constraintCoefficientsForSimplex = constraints.first;
  std::pair<std::vector<double>, Matrix> right = readRightHandSide(constraintCoefficients.n);
  Matrix rightHandSide = right.second;
  std::vector<double> rightHandSideForSimplex = right.first;
  std::cout << "Enter the approximation accuracy" << std::endl;
  double epsilon;
  std::cin >> epsilon;
  std::vector<double>
      initialStartingPoint = findInitialStartingPoint(objectiveCoefficients, constraintCoefficients, rightHandSide);
  printTheOptimizationProblem(objectiveCoefficientsForSimplex,
                              constraintCoefficientsForSimplex,
                              rightHandSideForSimplex);
  if (!initialStartingPoint.empty()) {
    std::cout << "An interior point method:" << std::endl;
    startInteriorPointAlgorithm(initialStartingPoint, constraintCoefficients, objectiveCoefficients, epsilon, 0.5);
    startInteriorPointAlgorithm(initialStartingPoint, constraintCoefficients, objectiveCoefficients, epsilon, 0.9);
  }
  std::cout << "Simplex method:" << std::endl;
  simplexMethod(objectiveCoefficientsForSimplex, constraintCoefficientsForSimplex, rightHandSideForSimplex, 0.0001);
}
